#BlueJ class context
comment0.params=list
comment0.target=InternetsList(java.util.List)
comment0.text=\n\ Todo\:\ Add\ method\ to\ check\ if\ account\ even\ exists\n
comment1.params=n\ i
comment1.target=void\ createInternets(java.lang.String,\ int)
comment10.params=list
comment10.target=void\ convertToArrayList(java.util.List)
comment11.params=
comment11.target=int\ getSmallestNet()
comment12.params=ins
comment12.target=int\ getSmallestNetOf(int[])
comment13.params=
comment13.target=java.util.ArrayList\ getInterList()
comment14.params=ins
comment14.target=int\ getValids(int[])
comment14.text=\n\ \ \ \ public\ void\ setLocsArray(int[]\ nums){\n\ \ \ \ \ \ \ \ validNetsLoc\ \=\ nums;\n\ \ \ \ }\n
comment15.params=ins
comment15.target=int[]\ getValidInternets(int[])
comment16.params=sub\ ins
comment16.target=void\ subtractInternets(int,\ int[])
comment16.text=\n\ \ \ \ private\ ArrayList<Internets>\ getValidInternets(ArrayList<Internets>\ inList){\n\ \ \ \ \ \ \ \ int\ count\ \=\ 0;\n\ \ \ \ \ \ \ \ ArrayList<Internets>\ newList\ \=\ new\ ArrayList<Internets>();\n\ \ \ \ \ \ \ \ for(Internets\ i\ \:\ inList){\n\ \ \ \ \ \ \ \ \ \ \ \ if(i.getIsEmpty()\ \=\=\ false){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ count++;\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ validNetsLoc\ \=\ new\ int[count];\n\ \ \ \ \ \ \ \ int\ num\ \=\ 0;\n\ \ \ \ \ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ inList.size();\ i++){\n\ \ \ \ \ \ \ \ \ \ \ \ if(inList.get(i).getInternets()\ >\ 0){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ validNetsLoc[num]\ \=\ i;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ num++;\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ //return\ count;\n\ \ \ \ }\n\ \ \ \ /**\ \n\ \ \ \ public\ void\ setCurrentlyPaids(int\ cp){\n\ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ interList.size();\ i++){\n\ \ \ \ interList.get(i).setCurrentlyPaid(cp);\n\ \ \ \ }\n\ \ \ \ }\n
comment17.params=name\ sub
comment17.target=void\ subtractInternet(java.lang.String,\ int)
comment18.params=
comment18.target=void\ sortByName()
comment19.params=name\ inList\ locs
comment19.target=int\ findInternets(java.lang.String,\ java.util.ArrayList,\ int[])
comment2.params=i\ list\ locs
comment2.target=int\ findInternetsPlace(Internets,\ java.util.ArrayList,\ int[])
comment20.params=ar
comment20.target=void\ printArray(int[])
comment21.params=list
comment21.target=int[]\ getALocArray(java.util.ArrayList)
comment22.params=name\ ins
comment22.target=void\ addInternets(java.lang.String,\ int)
comment23.params=locs
comment23.target=int[]\ sortByInternets(int[])
comment24.params=locs
comment24.target=int\ getTotalNetsOf(int[])
comment25.params=locsArray\ ins
comment25.target=java.lang.String\ calculatePayments(int[],\ int)
comment26.params=aIn\ pLArray\ iSLTGArray
comment26.target=int[][]\ doubleCheck(int,\ int[][],\ int[])
comment27.params=a
comment27.target=java.lang.String\ getPercentFront(int)
comment28.params=a
comment28.target=java.lang.String\ getPercentBack(int)
comment29.params=a\ i\ n\ p
comment29.target=java.lang.String\ printOutText(boolean,\ boolean,\ boolean,\ boolean)
comment3.params=
comment3.target=void\ percentagesMethods()
comment30.params=
comment30.target=java.util.ArrayList\ writeFile()
comment31.params=text
comment31.target=void\ outPrintln(java.lang.String)
comment32.params=text
comment32.target=void\ outPrint(java.lang.String)
comment4.params=
comment4.target=void\ setPercentages()
comment5.params=list
comment5.target=int[]\ getPercentages(java.util.ArrayList)
comment6.params=
comment6.target=void\ sortPercentages()
comment7.params=names
comment7.target=java.util.ArrayList\ convertStrToArrayList(java.lang.String[])
comment8.params=
comment8.target=void\ getTotalNets()
comment9.params=
comment9.target=int\ getTotals()
numComments=33
